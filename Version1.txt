import * as THREE from 'three'

let container, stats;
let camera, controls, scene, renderer;
let mesh, texture;
let helper;
var heightMap: number[][] = [];
const raycaster = new THREE.Raycaster();
const pointer = new THREE.Vector2();
let terrainId 

function AltTexture(heightMap: number[][]){
	const width = heightMap.length
	const height = heightMap[0].length
	const size = width * height;
	const data = new Uint8Array( 4 * size );

	var i = 0
	for (var x = 0; x < width; x ++){
		for (var y = 0; y < height; y++){
			i++
			const stride = i * 4
			data[ stride ] = heightMap[y][x];            
			data[ stride + 1 ] = heightMap[y][x];  
			data[ stride + 2 ] = heightMap[y][x];      
			data[ stride + 3 ] = 255;                        
		}
	}
	const texture = new THREE.DataTexture( data, width, height );
	return texture
}





function Init(){
	const width = window.innerWidth, height = window.innerHeight;
	container = document.getElementById( 'container' );
	container.innerHTML = '';

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( width, height );
	container.appendChild( renderer.domElement );

	// Generaete Tile Height Map
	const sizeX = 512;
	const sizeY = 512;
	// const heightMap: number[][] = [];
	const tileSize = 2;
	for (var x = 0; x < sizeX; x ++){
		heightMap[x] = []
		for (var y = 0; y < sizeY; y++){
			const height = Math.random() * 25
			heightMap[x][y] = height
		}
	}
	
	// Create Camera
	scene = new THREE.Scene();
	camera = new THREE.PerspectiveCamera( 90, width / height, 1, 10000 );
	camera.position.z = 50;
	camera.position.y = -35;
	camera.position.x = 0;
	camera.rotation.x = 45 * 0.0174533
	camera.rotation.y = 0 * 0.0174533
	camera.rotation.z = 0 * 0.0174533
	scene.add(camera)
	

	GenerateTerrainMesh()
// Add Light
	const color = 0xFFFFFF;
	const intensity = 1;
	const light = new THREE.AmbientLight(color, intensity);
	scene.add(light);
	
	//container.addEventListener( 'pointermove', onPointerMove );
	container.addEventListener( 'click', onPointerClick)
}


function Animate(){
	ModifyTerrainMesh()
	requestAnimationFrame( Animate );
	renderer.render( scene, camera );
}


Init()
Animate()


function ConvertWorldPointToGrid(numTilesX:number, numTilesY:number, gridSizeX:number, gridSizeY:number,gridPosX:number,gridPosY:number,contactPoint:THREE.Vector3){
	const posX = contactPoint.x
	const posY = contactPoint.y

	const tileSizeX = gridSizeX / numTilesX
	const tileSizeY = gridSizeY / numTilesY

	// Calculate 0,0 Tile
	const baseTileX = (gridPosX - gridSizeX/2)
	const baseTileY = (gridPosY - gridSizeY/2)

	const tilesX = Math.floor((posX - baseTileX) / tileSizeX)
	const tilesY = Math.floor((posY - baseTileY) / tileSizeY)

	return {tilesX, tilesY}
}

function onPointerClick( event) {
	const raycaster = new THREE.Raycaster();
	const pointer = new THREE.Vector2();
	pointer.x = ( event.clientX / renderer.domElement.clientWidth ) * 2 - 1;
	pointer.y = - ( event.clientY / renderer.domElement.clientHeight ) * 2 + 1;
	raycaster.setFromCamera( pointer, camera );
	const intersects = raycaster.intersectObject( mesh );
	// Toggle rotation bool for meshes that we clicked
	if ( intersects.length > 0 ) { 
		//console.log(intersects[0].point)
			const gridPos = ConvertWorldPointToGrid(127,127,100,100,0,0,intersects[0].point)
			console.log(gridPos) 

			ModifyHeightMap(gridPos.tilesX, gridPos.tilesY)
			console.log(heightMap[gridPos.tilesX][gridPos.tilesY])
	}
}

function onPointerMove( event) {
	const raycaster = new THREE.Raycaster();
	const pointer = new THREE.Vector2();
	pointer.x = ( event.clientX / renderer.domElement.clientWidth ) * 2 - 1;
	pointer.y = - ( event.clientY / renderer.domElement.clientHeight ) * 2 + 1;
	raycaster.setFromCamera( pointer, camera );
	const intersects = raycaster.intersectObject( mesh );
	// Toggle rotation bool for meshes that we clicked
	if ( intersects.length > 0 ) { 
		//console.log(intersects[0].point)
			const gridPos = ConvertWorldPointToGrid(127,127,100,100,0,0,intersects[0].point)
			console.log(gridPos) 
	}
}



function GenerateTerrainMesh(){
	const geometry = new THREE.PlaneGeometry(100,100,127,127)
	const texture = AltTexture(heightMap)
	texture.needsUpdate = true
	const material = new THREE.MeshStandardMaterial({map:texture})
	material.displacementMap = texture
	material.displacementScale = 10;
	material.wireframe = true
	material.needsUpdate = true
	mesh = new THREE.Mesh( geometry, material );
	mesh.name = "terrain"
	

// Set Mesh Position
	mesh.position.x = 0
	mesh.position.y = 0
	mesh.position.z = 0
	mesh.rotation.y = 0 * 0.0174533
	mesh.rotation.x = 0 * 0.0174533
	mesh.rotation.z = 0 * 0.0174533
	scene.add( mesh )

	terrainId = scene.getObject
}


function ModifyTerrainMesh(){
	let obj = scene.getObjectByName("terrain")
	scene.remove(obj)
	obj.geometry.dispose()
	obj.material.dispose()
	const geometry = new THREE.PlaneGeometry(100,100,127,127)
	const texture = AltTexture(heightMap)
	texture.needsUpdate = true
	const material = new THREE.MeshStandardMaterial({map:texture})
	material.displacementMap = texture
	material.displacementScale = 10;
	material.wireframe = true
	material.needsUpdate = true
	mesh = new THREE.Mesh( geometry, material );
	mesh.name = "terrain"

// Set Mesh Position
	mesh.position.x = 0
	mesh.position.y = 0
	mesh.position.z = 0
	mesh.rotation.y = 0 * 0.0174533
	mesh.rotation.x = 0 * 0.0174533
	mesh.rotation.z = 0 * 0.0174533
	scene.add( mesh )
}



function ModifyHeightMap(posX:number, posY:number){
	for (var x = -4; x <= 4; x++){
		for (var y = -4; y <= 4; y++ ){
			var xAdj = posX*4 + x
			var yAdj = posY*4 + y
			if (xAdj > 0 && xAdj < 512){
				if (yAdj > 0 && yAdj < 512){
					heightMap[xAdj][yAdj]+=10
				}
			}

		}
	}
}